class Solution {
    int []count;
    public List<Integer> countSmaller(int[] nums) {
       List<Integer>res=new ArrayList<>();
      count =new int[nums.length];
      int []original=new int[nums.length];
      for(int i=0;i<nums.length;i++){
          original[i]=i;
      }
      sort(nums,original,0,nums.length-1);
      for(int i=0;i<nums.length;i++){
          res.add(count[i]);
      }
       return res;
    }
    private void sort(int []arr,int []original ,int l,int r){
        if(l<r){
            int mid=(l+r)/2;
            sort(arr,original,l,mid);
            sort(arr,original,mid+1,r);
            merge(arr,original,l,mid,r);
        }
    }
    private void merge(int []arr,int []original,int left,int mid,int right){
        int  lsize=mid-left+1;
        int rsize=right-mid;
        int []larr=new int[lsize];
        int []rarr=new int[rsize];
        for(int i=0;i<lsize;i++){
            larr[i]=original[left+i];
        }       
        for(int i=0;i<rsize;i++){
            rarr[i]=original[i+mid+1];
        }
        int i=0,j=0,k=left,rightCount=0;
        while(i<lsize && j<rsize){
            if(arr[larr[i]]<=arr[rarr[j]]){
                original[k]=larr[i];
                count[larr[i]]+=rightCount;
                i++;
            }
            else{
                original[k]=rarr[j];
                rightCount++;
                j++;
            }
            k++;
        }
        while(i<lsize){
            original[k]=larr[i];
                count[larr[i]]+=rightCount;
                i++;
                k++;
        }
        while(j<rsize){
             original[k]=rarr[j];
             k++;
                j++;
        }

    }
}
